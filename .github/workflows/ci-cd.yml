name: Build & Push & Deploy

on:
  push:
    branches: ["dev"]

permissions:
  contents: read
  packages: write

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: "gradle"

      - name: Build JAR (Gradle)
        run: |
          chmod +x ./gradlew
          ./gradlew -Dorg.gradle.daemon=false -x test bootJar
          ls -lh build/libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Alternativa 1: construir usando Dockerfile.ci (copia o JAR gerado)
      - name: Build & Push image (Dockerfile.ci)
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${OWNER_LC}/ong-backend
          SHA_TAG=${{ github.sha }}
          docker build -f Dockerfile.ci -t $IMAGE:$SHA_TAG -t $IMAGE:latest .
          docker push $IMAGE:$SHA_TAG
          docker push $IMAGE:latest

  # Opção B: Deploy por SSH — só ativa se você quiser
  deploy:
    if: ${{ success() && vars.DEPLOY_VIA_SSH == 'true' }}
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH (docker compose pull && up -d)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/apps/aumigos-api
            docker login ghcr.io -u ${{ secrets.GHCR_USER }} -p ${{ secrets.GHCR_TOKEN }}
            docker compose pull
            docker compose up -d --force-recreate
            docker image prune -f
